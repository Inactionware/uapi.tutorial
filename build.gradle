/*
 * Copyright (C) 2017. The UAPI Authors
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at the LICENSE file.
 *
 * You must gained the permission from the authors if you want to
 * use the project into a commercial product
 */

buildscript {
    repositories {
        jcenter()
    }
}

//apply plugin: 'jacoco'

ext.project_version = getProjectVersion()
ext.publish_repo    = getMavenRepo()

allprojects {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "http://dl.bintray.com/typesafe/maven-releases" }
        maven { url "http://dl.bintray.com/inactionware/maven-snapshot" }
        maven { url "http://dl.bintray.com/inactionware/maven-release" }
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'application'

    group = "${project_group}"
    version = "${project_version}"
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    configurations {
        codacy
    }

    jar {
        manifest.attributes
        exclude('**/*.java')
    }

//    def generatedSources = ['**/*_Generated.*']

//    test {
//        jacoco {
//            excludes = generatedSources
//        }
//    }

//    jacocoTestReport {
//        afterEvaluate {
//            classDirectories = files(classDirectories.files.collect {
//                fileTree(dir: it, exclude: generatedSources)
//            })
//        }
//        reports {
//            xml.enabled = true
//            html.enabled = true
//        }
//    }
//
//    jacoco {
//        toolVersion = "${jacoco_version}"
//    }
//
//    build.dependsOn jacocoTestReport

    mainClassName = 'uapi.app.Bootstrap'

    task copyConfig {
        def cfgDir = file("conf")
        outputs.dir cfgDir
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "${gradle_version}"
}

def getProjectVersion() {
    def release = project.hasProperty("project_release") ? project.project_release.toBoolean() : null
    def rcno = project.hasProperty("project_rcno") ? project.project_rcno.toInteger() : null
    def prjVer = "${project_version_major}.${project_version_minor}.${project_version_fix}"
    if (release) {
        return "${prjVer}-release"
    } else if (rcno > 0) {
        return "${prjVer}-rc${rcno}"
    } else {
        def timestampFormat = new java.text.SimpleDateFormat('yyyyMMddHHmmss')
        timestampFormat.timeZone = TimeZone.getTimeZone("UTC")
        def ts = timestampFormat.format(new Date())
        return "${prjVer}-${ts}"
    }
}

def getMavenRepo() {
    if (project.project_release.toBoolean()) {
        return 'maven-release'
    } else {
        return 'maven-snapshot'
    }
}
